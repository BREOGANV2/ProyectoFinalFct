/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author HREF DIGITAL
 */
public class EliminacionUsuario extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(EliminacionUsuario.class.getName());

    /**
     * Creates new form EliminacionUsuario
     */
    public EliminacionUsuario() {

        initComponents();
        modelTabla = new DefaultTableModel(
                new String[]{"Nombre", "Edad", "Genero", "Fecha Registro"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // bloquear edición
            }
        };
        table.setModel(modelTabla);

        pintarTablaUsuarios(); // cargar datos
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Eliminacion de Usuarios"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Edad", "Genero", "Fecha Registro"
            }
        ));
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jButton1.setText("Eliminar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        if (row >= 0) {
            table.setRowSelectionInterval(row, row);    // selecciona la fila
            table.setColumnSelectionInterval(0, 0);     // fuerza que solo la columna 0 quede seleccionada
        }
    }//GEN-LAST:event_tableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int fila = table.getSelectedRow();
    if (fila == -1) {
        JOptionPane.showMessageDialog(this, "Selecciona un usuario para eliminar", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    Usuario usuario = (Usuario) modelTabla.getValueAt(fila, 0);

    int confirmacion = JOptionPane.showConfirmDialog(
        this,
        "¿Seguro que deseas eliminar al usuario \"" + usuario.getNombre() + "\" y todo lo asociado?",
        "Confirmación",
        JOptionPane.YES_NO_OPTION
    );

    if (confirmacion != JOptionPane.YES_OPTION) return;

    Connection conn = null;

    try {
        conn = DatabaseManager.getInstance().getConnection();
        conn.setAutoCommit(false); // empezar transacción

        // 1. Obtener todas las rutinas del usuario
        List<Integer> idRutinas = new ArrayList<>();
        String sqlRutinas = "SELECT id_rutina FROM Rutinas WHERE id_usuario = ?";
        try (PreparedStatement ps = conn.prepareStatement(sqlRutinas)) {
            ps.setInt(1, usuario.getIdUsuario());
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    idRutinas.add(rs.getInt("id_rutina"));
                }
            }
        }

        for (int idRutina : idRutinas) {
            // 2. Eliminar ejecuciones
            try (PreparedStatement ps = conn.prepareStatement("DELETE FROM Rutina_Ejecuciones WHERE id_rutina = ?")) {
                ps.setInt(1, idRutina);
                ps.executeUpdate();
            }

            // 3. Eliminar ejercicios asignados
            try (PreparedStatement ps = conn.prepareStatement("DELETE FROM Rutina_Ejercicios WHERE id_rutina = ?")) {
                ps.setInt(1, idRutina);
                ps.executeUpdate();
            }

            // 4. Eliminar la rutina
            try (PreparedStatement ps = conn.prepareStatement("DELETE FROM Rutinas WHERE id_rutina = ?")) {
                ps.setInt(1, idRutina);
                ps.executeUpdate();
            }
        }

        // 5. Finalmente, eliminar el usuario
        try (PreparedStatement ps = conn.prepareStatement("DELETE FROM Usuarios WHERE id_usuario = ?")) {
            ps.setInt(1, usuario.getIdUsuario());
            ps.executeUpdate();
        }

        conn.commit();
        JOptionPane.showMessageDialog(this, "Usuario y datos relacionados eliminados correctamente.");
        pintarTablaUsuarios(); // actualizar tabla

    } catch (SQLException ex) {
        ex.printStackTrace();
        try {
            if (conn != null) conn.rollback();
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(this, "Error al eliminar usuario", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (conn != null) conn.setAutoCommit(true);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pintarTablaUsuarios() {
        try {
            List<Usuario> usuariosCargados = UsuarioDAO.getInstance().selectAll(); // obtener usuarios

            modelTabla.setRowCount(0); // limpiar tabla

            for (Usuario u : usuariosCargados) {
                Object[] fila = {
                    u, // mostramos el objeto, se imprime su toString()
                    u.getEdad(),
                    u.getGenero(),
                    u.getFechaRegistro()
                };
                modelTabla.addRow(fila);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar usuarios", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new EliminacionUsuario().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel modelTabla;
}
