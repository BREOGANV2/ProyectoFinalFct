
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author HREF DIGITAL
 */
public class ModificarRutinaEjecucion extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(ModificarRutinaEjecucion.class.getName());

    /**
     * Creates new form ModificarRutinaEjecucion
     */
    public ModificarRutinaEjecucion() {
        initComponents();
        setMinimumSize(new java.awt.Dimension(600, 600));
        cargarTabla();
    }

    private void cargarTabla() {
        try {
            ejecuciones = RutinaEjecucionDAO.getInstance().selectAll();
            String[] columnas = {"ID", "ID Rutina", "Fecha", "Duración", "Notas"};
            Object[][] datos = new Object[ejecuciones.size()][5];

            for (int i = 0; i < ejecuciones.size(); i++) {
                RutinaEjecucion re = ejecuciones.get(i);
                datos[i][0] = re.getIdEjecucion();
                datos[i][1] = re.getIdRutina();
                datos[i][2] = re.getFechaEjecucion();
                datos[i][3] = re.getDuracionMinutos();
                datos[i][4] = re.getNotas();
            }

            tablaEjecuciones.setModel(new javax.swing.table.DefaultTableModel(datos, columnas));
        } catch (Exception e) {
            logger.severe("Error cargando tabla: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEjecuciones = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Modificar Ejecución de una Rutina"));
        jPanel1.setMinimumSize(new java.awt.Dimension(500, 500));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        tablaEjecuciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaEjecuciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaEjecucionesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaEjecuciones);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.25;
        jPanel1.add(jTextField1, gridBagConstraints);

        jLabel1.setText("Duración");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.25;
        jPanel1.add(jTextField2, gridBagConstraints);

        jLabel2.setText("Fecha dd/mm/yyyy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.25;
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jLabel3.setText("Notas");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        jPanel1.add(jLabel3, gridBagConstraints);

        updateButton.setText("Modificar");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        jPanel1.add(updateButton, gridBagConstraints);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaEjecucionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaEjecucionesMouseClicked
        // TODO add your handling code here:
        int fila = tablaEjecuciones.getSelectedRow();
    if (fila >= 0 && fila < ejecuciones.size()) {
        selectedIndex = fila;
        RutinaEjecucion re = ejecuciones.get(fila);
        jTextField1.setText(re.getDuracionMinutos() != null ? String.valueOf(re.getDuracionMinutos()) : "");
        jTextField2.setText(re.getFechaEjecucion().toLocalDate().toString()); // yyyy-MM-dd
        jTextArea1.setText(re.getNotas());
    }
    }//GEN-LAST:event_tablaEjecucionesMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
         if (selectedIndex < 0) return;

    try {
        RutinaEjecucion re = ejecuciones.get(selectedIndex);
        boolean modificado = false;

        // Parsear campos
        Integer nuevaDuracion = jTextField1.getText().isEmpty() ? null : Integer.parseInt(jTextField1.getText());
        if ((re.getDuracionMinutos() == null && nuevaDuracion != null) || 
            (re.getDuracionMinutos() != null && !re.getDuracionMinutos().equals(nuevaDuracion))) {
            re.setDuracionMinutos(nuevaDuracion);
            modificado = true;
        }

        LocalDateTime nuevaFecha = LocalDateTime.parse(jTextField2.getText() + "T00:00:00");
        if (!re.getFechaEjecucion().toLocalDate().equals(nuevaFecha.toLocalDate())) {
            re.setFechaEjecucion(nuevaFecha);
            modificado = true;
        }

        String nuevasNotas = jTextArea1.getText();
        if ((re.getNotas() == null && !nuevasNotas.isEmpty()) || 
            (re.getNotas() != null && !re.getNotas().equals(nuevasNotas))) {
            re.setNotas(nuevasNotas);
            modificado = true;
        }

        if (modificado) {
            RutinaEjecucionDAO.getInstance().update(re);
            cargarTabla();
            javax.swing.JOptionPane.showMessageDialog(this, "Ejecución actualizada correctamente.");
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "No hay cambios para guardar.");
        }

    } catch (Exception ex) {
        logger.severe("Error actualizando ejecución: " + ex.getMessage());
        javax.swing.JOptionPane.showMessageDialog(this, "Error al actualizar: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
         int fila = tablaEjecuciones.getSelectedRow();
    if (fila == -1) {
        JOptionPane.showMessageDialog(this, "Selecciona una ejecución para eliminar", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    RutinaEjecucion ejecucion = ejecuciones.get(fila);

    int confirmacion = JOptionPane.showConfirmDialog(
        this,
        "¿Seguro que deseas eliminar esta ejecución?",
        "Confirmación",
        JOptionPane.YES_NO_OPTION
    );

    if (confirmacion != JOptionPane.YES_OPTION) {
        return;
    }

    try {
        RutinaEjecucionDAO.getInstance().delete(ejecucion.getIdEjecucion());
        JOptionPane.showMessageDialog(this, "Ejecución eliminada correctamente.");
        cargarTabla(); // recarga los datos de la tabla
        selectedIndex = -1;
        jTextField1.setText("");
        jTextField2.setText("");
        jTextArea1.setText("");
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al eliminar la ejecución", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new ModificarRutinaEjecucion().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable tablaEjecuciones;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel tableModel;
private List<RutinaEjecucion> ejecuciones; // para vincular cada fila con su objeto
private RutinaEjecucion ejecucionSeleccionada;
    private int selectedIndex = -1;
   
}
