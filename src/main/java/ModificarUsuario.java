/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.util.List;
import javax.swing.table.TableModel;

/**
 *
 * @author HREF DIGITAL
 */
public class ModificarUsuario extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(ModificarUsuario.class.getName());

    /**
     * Creates new form ModificarUsuario
     */
    public ModificarUsuario() {

        initComponents();
    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    cargarUsuariosEnTabla();         // Llena la tabla con los datos de la base
    modeloTabla = table.getModel();  // Guarda el modelo (no obligatorio si no lo usas)
    }

    private void cargarUsuariosEnTabla() {
        try {
            List<Usuario> usuarios = UsuarioDAO.getInstance().selectAll();
            String[] columnas = {"ID", "Nombre", "Edad", "Género", "Fecha"};
            Object[][] datos = new Object[usuarios.size()][5];

            for (int i = 0; i < usuarios.size(); i++) {
                Usuario u = usuarios.get(i);
                datos[i][0] = u.getIdUsuario();
                datos[i][1] = u.getNombre();
                datos[i][2] = u.getEdad();
                datos[i][3] = u.getGenero();
                datos[i][4] = u.getFechaRegistro();
            }

            javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(datos, columnas) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Evita edición directa
                }
            };
            table.setModel(model);

            // Ocultar columna ID visualmente
            table.getColumnModel().getColumn(0).setMinWidth(0);
            table.getColumnModel().getColumn(0).setMaxWidth(0);
            table.getColumnModel().getColumn(0).setWidth(0);

        } catch (Exception e) {
            logger.log(java.util.logging.Level.SEVERE, null, e);
            javax.swing.JOptionPane.showMessageDialog(this, "Error al cargar usuarios: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fondo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        add_button = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        fondo.setBorder(javax.swing.BorderFactory.createTitledBorder("Modificar Usuario"));
        fondo.setLayout(new java.awt.GridBagLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Edad", "Genero", "Fecha"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        fondo.add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Nombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fondo.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.25;
        fondo.add(jTextField1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.25;
        fondo.add(jSpinner1, gridBagConstraints);

        jLabel2.setText("Edad");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fondo.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Género");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fondo.add(jLabel3, gridBagConstraints);

        add_button.setText("Modificar");
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        fondo.add(add_button, gridBagConstraints);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hombre", "Mujer", "Otro" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.25;
        fondo.add(jComboBox1, gridBagConstraints);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        fondo.add(btnEliminar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(fondo, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        int fila = table.getSelectedRow();
        if (fila == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Selecciona un usuario de la tabla.");
            return;
        }

        try {
            int idUsuario = (int) table.getModel().getValueAt(fila, 0);
            String nombreNuevo = jTextField1.getText();
            int edadNueva = (Integer) jSpinner1.getValue();
            String generoNuevo = (String) jComboBox1.getSelectedItem();

            Usuario usuarioBD = UsuarioDAO.getInstance().selectById(idUsuario);
            if (usuarioBD == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Usuario no encontrado.");
                return;
            }

            boolean cambiado = !nombreNuevo.equals(usuarioBD.getNombre())
                    || edadNueva != usuarioBD.getEdad()
                    || !generoNuevo.equals(usuarioBD.getGenero());

            if (!cambiado) {
                javax.swing.JOptionPane.showMessageDialog(this, "No se han realizado cambios.");
                return;
            }

            Usuario modificado = new Usuario(
                    idUsuario,
                    nombreNuevo,
                    edadNueva,
                    generoNuevo,
                    java.time.LocalDate.now(),
                    usuarioBD.getContraseña()
            );

            UsuarioDAO.getInstance().update(modificado);
            javax.swing.JOptionPane.showMessageDialog(this, "Usuario actualizado con éxito.");
            cargarUsuariosEnTabla();  // refrescar la tabla

        } catch (Exception ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
            javax.swing.JOptionPane.showMessageDialog(this, "Error al modificar: " + ex.getMessage());
        }
    }//GEN-LAST:event_add_buttonActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int fila = table.getSelectedRow();
    if (fila >= 0) {
        jTextField1.setText(table.getModel().getValueAt(fila, 1).toString());
        jSpinner1.setValue(Integer.parseInt(table.getModel().getValueAt(fila, 2).toString()));
        jComboBox1.setSelectedItem(table.getModel().getValueAt(fila, 3).toString());
    }
    }//GEN-LAST:event_tableMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
         int fila = table.getSelectedRow();
    if (fila == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Selecciona un usuario para eliminar", "Advertencia", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    int idUsuario = (int) table.getModel().getValueAt(fila, 0);
    Usuario usuario;
    try {
        usuario = UsuarioDAO.getInstance().selectById(idUsuario);
        if (usuario == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Usuario no encontrado.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Error al obtener datos del usuario", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    int confirmacion = javax.swing.JOptionPane.showConfirmDialog(
        this,
        "¿Seguro que deseas eliminar al usuario \"" + usuario.getNombre() + "\" y todo lo asociado?",
        "Confirmación",
        javax.swing.JOptionPane.YES_NO_OPTION
    );

    if (confirmacion != javax.swing.JOptionPane.YES_OPTION) return;

    java.sql.Connection conn = null;

    try {
        conn = DatabaseManager.getInstance().getConnection();
        conn.setAutoCommit(false); // empezar transacción

        // 1. Obtener todas las rutinas del usuario
        java.util.List<Integer> idRutinas = new java.util.ArrayList<>();
        String sqlRutinas = "SELECT id_rutina FROM Rutinas WHERE id_usuario = ?";
        try (java.sql.PreparedStatement ps = conn.prepareStatement(sqlRutinas)) {
            ps.setInt(1, usuario.getIdUsuario());
            try (java.sql.ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    idRutinas.add(rs.getInt("id_rutina"));
                }
            }
        }

        for (int idRutina : idRutinas) {
            // 2. Eliminar ejecuciones
            try (java.sql.PreparedStatement ps = conn.prepareStatement("DELETE FROM Rutina_Ejecuciones WHERE id_rutina = ?")) {
                ps.setInt(1, idRutina);
                ps.executeUpdate();
            }

            // 3. Eliminar ejercicios asignados
            try (java.sql.PreparedStatement ps = conn.prepareStatement("DELETE FROM Rutina_Ejercicios WHERE id_rutina = ?")) {
                ps.setInt(1, idRutina);
                ps.executeUpdate();
            }

            // 4. Eliminar la rutina
            try (java.sql.PreparedStatement ps = conn.prepareStatement("DELETE FROM Rutinas WHERE id_rutina = ?")) {
                ps.setInt(1, idRutina);
                ps.executeUpdate();
            }
        }

        // 5. Finalmente, eliminar el usuario
        try (java.sql.PreparedStatement ps = conn.prepareStatement("DELETE FROM Usuarios WHERE id_usuario = ?")) {
            ps.setInt(1, usuario.getIdUsuario());
            ps.executeUpdate();
        }

        conn.commit();
        javax.swing.JOptionPane.showMessageDialog(this, "Usuario y datos relacionados eliminados correctamente.");
        cargarUsuariosEnTabla(); // actualizar tabla

    } catch (java.sql.SQLException ex) {
        ex.printStackTrace();
        try {
            if (conn != null) conn.rollback();
        } catch (java.sql.SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        javax.swing.JOptionPane.showMessageDialog(this, "Error al eliminar usuario", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (conn != null) conn.setAutoCommit(true);
        } catch (java.sql.SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new ModificarUsuario().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_button;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JPanel fondo;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    private TableModel modeloTabla;
}
